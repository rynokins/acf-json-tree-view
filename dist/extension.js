"use strict";const x=require("fs"),w=require("path"),e=require("vscode");let T=new Set,A=null,M=null;class S{constructor(){this._onDidChangeFileDecorations=new e.EventEmitter,this.onDidChangeFileDecorations=this._onDidChangeFileDecorations.event}async provideFileDecoration(t,r){if(t.scheme!=="file")return;const i=t.fsPath;if(!(!i.includes(`${w.sep}acf-json${w.sep}`)||!i.endsWith(".json")))try{const s=await x.promises.readFile(i,"utf8"),a=JSON.parse(s);if(a.title)return new e.FileDecoration("⬡",`ACF: ${a.title}`,new e.ThemeColor("charts.blue"))}catch(s){console.error("Error processing file:",i,s)}}refresh(t){this._onDidChangeFileDecorations.fire(t)}}class G{constructor(){this._onDidChangeTreeData=new e.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.themes=new Map,this.acfFiles=[],this.iconRules=this.loadIconRules(),this.keyMap=new Map}refresh(){this.loadAcfFiles().then(()=>{this._onDidChangeTreeData.fire()}).catch(t=>{console.error("Error refreshing ACF tree data:",t),this._onDidChangeTreeData.fire()})}loadIconRules(){const r=e.workspace.getConfiguration("acfJsonTreeView").get("iconRules",[]);return Array.from(new Map(r.map(s=>[s.name,{...s,weight:s.weight!==void 0?s.weight:0}])).values()).sort((s,a)=>(a.weight||0)-(s.weight||0))}evaluateCondition(t,r,i){if(!t)return!0;if(t.titleContains!==void 0||t.locationParam!==void 0)return t.titleContains&&t.locationParam?r.includes(t.titleContains.toLowerCase())&&i.includes(t.locationParam):t.titleContains?r.includes(t.titleContains.toLowerCase()):t.locationParam?i.includes(t.locationParam):!0;if(t.and!==void 0){const s=Array.isArray(t.and)?t.and:[t.and];return s.length===0||s.every(a=>this.evaluateCondition(a,r,i))}if(t.or!==void 0){const s=Array.isArray(t.or)?t.or:[t.or];return s.length>0&&s.some(a=>this.evaluateCondition(a,r,i))}return!1}isOptionsPage(t){return!t.location||!Array.isArray(t.location)?!1:t.location.some(r=>Array.isArray(r)&&r.some(i=>i.param==="options_page"))}getIconAndColor(t,r){const i=e.workspace.getConfiguration("acfJsonTreeView"),s=i.get("showOverrideIndicator",!0),a=i.get("overrideIcon","add"),c=i.get("overrideColor","charts.orange");if(s&&r.isOverride)return{icon:new e.ThemeIcon(a,new e.ThemeColor(c)),color:c};const d=t.toLowerCase(),u=this.getLocationParams(r);for(const h of this.iconRules)if(this.evaluateCondition(h.condition,d,u))return{icon:new e.ThemeIcon(h.icon,new e.ThemeColor(h.color)),color:h.color};return{icon:new e.ThemeIcon("json",new e.ThemeColor("charts.yellow")),color:"charts.yellow"}}getLocationParams(t){return!t.location||!Array.isArray(t.location)?[]:t.location.flatMap(r=>Array.isArray(r)?r.map(i=>i.param).filter(i=>i):[])}getTreeItem(t){const r=e.workspace.getConfiguration("acfJsonTreeView"),i=r.get("themeIcon","folder"),s=r.get("themeColor","folderIcons.folderForeground");if(t.type==="theme"){const h=new e.TreeItem(t.name,e.TreeItemCollapsibleState.Expanded);return h.contextValue="theme",h.iconPath=new e.ThemeIcon(i,new e.ThemeColor(s)),h}const a=this.getIconAndColor(t.title,t.fieldGroup),c=new e.TreeItem(t.title,e.TreeItemCollapsibleState.None);c.contextValue="acfFile";const d=e.workspace.asRelativePath(t.uri),u=[`## ${t.title}`,""];return u.push(`📁 **File:** \`${t.filename}.json\``,"",`📂 **Path:** \`${d}\``,""),t.isOverride&&t.overrideOf&&u.push(`**++ Overrides ++** \`../${t.overrideOf}/acf-json/${t.filename}.json\``,""),u.push(`🔧 **Type:** ${this.getFieldGroupType(t.title,t.fieldGroup)}`,"","_Click to open file_"),c.tooltip=new e.MarkdownString(u.join(`
`)),c.command={command:"acfFieldGroups.openFileQuiet",title:"Open",arguments:[t.uri]},c.contextValue="acfFile",c.iconPath=a.icon,c}getThemeFolderFromPath(t){const r=t.match(/themes[\/\\]([^\/\\]+)[\/\\]acf-json/);return r?r[1]:null}getFieldGroupType(t,r){const i=t.toLowerCase(),s=this.getLocationParams(r);for(const a of this.iconRules)if(this.evaluateCondition(a.condition,i,s))return a.typeLabel||"Custom Fields";return"General Fields"}getChildren(t){return t?t.type==="theme"?this.themes.get(t.name).children:[]:Array.from(this.themes.values())}getThemeFromPath(t){const r=t.match(/(themes[\/\\]([^\/\\]+))/);return r?r[2]:"Unknown Theme"}async loadAcfFiles(){this.themes.clear(),this.keyMap.clear();const{themeMetadataMap:t,themePathMap:r,parentChildMap:i}=await K();try{const s=await e.workspace.findFiles("**/acf-json/*.json");console.log(`Found ${s.length} ACF files`);for(const c of s)try{const d=await x.promises.readFile(c.fsPath,"utf8"),u=JSON.parse(d);if(u.title){const h=w.basename(c.fsPath,".json"),f=this.getThemeFolderFromPath(c.fsPath);if(!f||e.workspace.getConfiguration("acfJsonTreeView").get("ignoreThemes",[]).includes(f))continue;const m=t.get(f)||{name:f,folderName:f,template:null},p=u.key||h;let C=!1,b=null;if(m.template){let o=m.template;for(;o&&r.has(o);){const l=r.get(o),F=w.join(l,"acf-json",`${h}.json`);try{await x.promises.access(F),C=!0,b=o;break}catch{o=(t.get(o)||{}).template}}}u.isOverride=C,u.overrideOf=b,this.themes.has(m.name)||this.themes.set(m.name,{type:"theme",name:m.name,folderName:f,children:[]}),this.themes.get(m.name).children.push({title:u.title,filename:h,uri:c,key:p,fieldGroup:u,isOverride:u.isOverride,overrideOf:u.overrideOf})}}catch(d){console.error("Error processing ACF file:",c.fsPath,d)}const a=new Map([...this.themes.entries()].sort());this.themes=a;for(const[c,d]of this.themes)d.children.sort((u,h)=>u.title.localeCompare(h.title,void 0,{numeric:!0,sensitivity:"base"}));console.log(`Loaded ${this.keyMap.size} ACF field groups across ${this.themes.size} themes`)}catch(s){console.error("Error finding ACF files:",s)}}}function $(n){if(!n||n.scheme!=="file")return!1;const t=n.fsPath;return t.includes(`${w.sep}acf-json${w.sep}`)&&t.endsWith(".json")}async function _(n){const t=w.join(n,"style.css");try{const i=(await x.promises.readFile(t,"utf8")).match(/\/\*[\s\S]*?\*\//);if(!i)return{name:w.basename(n),folderName:w.basename(n),template:null};const s=i[0],a={name:w.basename(n),folderName:w.basename(n),template:null},c=s.match(/Theme\s*Name\s*:\s*(.+)/i);c&&(a.name=c[1].trim());const d=s.match(/Template\s*:\s*(.+)/i);return d&&(a.template=d[1].trim()),a}catch(r){return console.error("Error reading style.css:",r),{name:w.basename(n),folderName:w.basename(n),template:null}}}async function K(){const n=new Map,t=new Map,r=new Map;try{const i=await e.workspace.findFiles("**/themes/*/style.css");for(const s of i){const a=w.dirname(s.fsPath),c=w.basename(a),d=await _(a);d.folderName=c,n.set(c,d),t.set(c,a)}for(const[s,a]of n)a.template&&r.set(s,a.template);return{themeMetadataMap:n,themePathMap:t,parentChildMap:r}}catch(i){return console.error("Error building theme hierarchy:",i),{themeMetadataMap:new Map,themePathMap:new Map,parentChildMap:new Map}}}async function N(){try{const n=e.workspace.getConfiguration("explorer");A===null&&(A=n.get("autoReveal")),await n.update("autoReveal",!1,e.ConfigurationTarget.Global)}catch(n){console.error("Failed to disable auto reveal:",n)}}async function j(){try{A!==null&&(await e.workspace.getConfiguration("explorer").update("autoReveal",A,e.ConfigurationTarget.Global),A=null)}catch(n){console.error("Failed to restore auto reveal:",n)}}function P(){M&&clearTimeout(M),M=setTimeout(async()=>{const n=e.window.activeTextEditor;(!n||!$(n.document.uri)||!T.has(n.document.uri.toString()))&&(await j(),T.clear())},2e3)}async function J(n){try{T.add(n.toString()),await N();const t=await e.workspace.openTextDocument(n);await e.window.showTextDocument(t,{preview:!1,preserveFocus:!1}),P(),e.window.setStatusBarMessage(`Opened ACF file: ${w.basename(n.fsPath)}`,2e3)}catch(t){await j(),e.window.showErrorMessage(`Failed to open file: ${t.message}`)}}function U(n){console.log("ACF JSON Title on Hover extension activated");const t=new S;n.subscriptions.push(e.window.registerFileDecorationProvider(t));const r=e.window.onDidChangeActiveTextEditor(async o=>{if(o&&o.document){const l=o.document.uri;$(l)&&T.has(l.toString())?(await N(),P()):$(l)||P()}});n.subscriptions.push(r);const i=e.workspace.onDidCloseTextDocument(o=>{T.delete(o.uri.toString()),T.size===0&&P()});n.subscriptions.push(i);const s=e.workspace.createFileSystemWatcher("**/acf-json/*.json"),a=o=>{console.log("ACF file changed:",o.fsPath),t.refresh(o),p.refresh()};s.onDidChange(a),s.onDidCreate(a),s.onDidDelete(a),n.subscriptions.push(s);const c=e.commands.registerCommand("acfFieldGroups.refresh",()=>p.refresh()),d=e.commands.registerCommand("acfFieldGroups.openFileQuiet",async o=>{const l=o&&o.uri?o.uri:o;if(!l){e.window.showErrorMessage("No file URI provided");return}await J(l)}),u=e.commands.registerCommand("acfFieldGroups.openFile",async o=>{try{const l=o&&o.uri?o.uri:o;if(!l)throw new Error("No URI provided");const F=await e.workspace.openTextDocument(l);await e.window.showTextDocument(F),setTimeout(async()=>{await e.commands.executeCommand("revealInExplorer",l)},200)}catch(l){e.window.showErrorMessage(`Failed to open file: ${l.message}`)}}),h=e.commands.registerCommand("acfFieldGroups.generateNewKey",L),f=e.commands.registerCommand("acfFieldGroups.generateNewGroupKey",async o=>{const l=o&&o.uri?o.uri:e.window.activeTextEditor?.document.uri;l&&await V(l)}),y=e.commands.registerCommand("acfFieldGroups.generateNewFieldKeyAndReplaceAll",async o=>{const l=o&&o.uri?o.uri:e.window.activeTextEditor?.document.uri;if(l){const F=e.window.activeTextEditor?.selection.active;await B(l,F)}}),g=e.commands.registerCommand("acfFieldGroups.generateNewKeysForAllFields",async o=>{const l=o&&o.uri?o.uri:e.window.activeTextEditor?.document.uri;l&&await q(l)});n.subscriptions.push(c,d,u,h,f,y,g),n.subscriptions.push({dispose:async()=>{M&&clearTimeout(M),await j(),T.clear()}}),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.copyPath",async o=>{o&&o.uri&&(await e.env.clipboard.writeText(o.uri.fsPath),e.window.showInformationMessage(`Copied path to clipboard: ${o.uri.fsPath}`))})),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.copyRelativePath",async o=>{if(o&&o.uri){const l=e.workspace.asRelativePath(o.uri);await e.env.clipboard.writeText(l),e.window.showInformationMessage(`Copied relative path to clipboard: ${l}`)}})),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.revealInExplorer",async o=>{o&&o.uri&&await e.commands.executeCommand("revealInExplorer",o.uri)})),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.openInNewEditorGroup",async o=>{o&&o.uri&&await e.window.showTextDocument(o.uri,{viewColumn:e.ViewColumn.Beside})})),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.rename",async o=>{if(o&&o.uri){const l=await e.window.showInputBox({prompt:"Enter new file name",value:w.basename(o.uri.fsPath)});if(l){const F=e.Uri.joinPath(o.uri,"..",l);await e.workspace.fs.rename(o.uri,F),p.refresh()}}})),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.delete",async o=>{if(o&&o.uri&&await e.window.showWarningMessage(`Are you sure you want to delete '${w.basename(o.uri.fsPath)}'?`,{modal:!0},"Delete")==="Delete")try{await e.workspace.fs.delete(o.uri,{recursive:!1}),p.refresh(),e.window.showInformationMessage(`Deleted: ${w.basename(o.uri.fsPath)}`)}catch(F){e.window.showErrorMessage(`Failed to delete file: ${F.message}`)}})),n.subscriptions.push(e.commands.registerCommand("acfFieldGroups.newFile",async o=>{try{let l;if(o&&o.type==="theme"){const v=Array.from(p.themes.get(o.name).children);v.length>0&&(l=w.dirname(v[0].uri.fsPath))}else if(o&&o.uri)l=w.dirname(o.uri.fsPath);else{const v=await e.workspace.findFiles("**/acf-json/*.json",null,1);v.length>0&&(l=w.dirname(v[0].fsPath))}if(!l){e.window.showErrorMessage("Could not determine base path for new file");return}let F=`group_${E(13)}`;const k=await e.window.showInputBox({prompt:"Enter new file name (will be suffixed with .json)",value:F});if(k){const v=k.endsWith(".json")?k:`${k}.json`,D=w.join(l,v),R=e.Uri.file(D),O=JSON.stringify({key:k.endsWith(".json")?k.replace(".json",""):k,title:v.replace(".json",""),fields:[],location:[[{param:"post_type",operator:"==",value:"post"}]],menu_order:0,position:"normal",style:"default",label_placement:"top",instruction_placement:"label",hide_on_screen:[],active:!0,description:""},null,2);await e.workspace.fs.writeFile(R,Buffer.from(O)),await e.window.showTextDocument(R),p.refresh()}}catch(l){e.window.showErrorMessage(`Failed to create new file: ${l.message}`)}}));const m=e.commands.registerCommand("acfFieldGroups.openSettings",()=>{e.commands.executeCommand("workbench.action.openSettings","acfJsonTreeView")});n.subscriptions.push(m);const p=new G,C=e.window.createTreeView("acfFieldGroups",{treeDataProvider:p,showCollapseAll:!1});n.subscriptions.push(C);const b=e.workspace.onDidChangeConfiguration(o=>{o.affectsConfiguration("acfJsonTreeView")&&(p.iconRules=p.loadIconRules(),p.refresh(),t.refresh())});n.subscriptions.push(b),p.refresh()}function W(){M&&clearTimeout(M),j(),T.clear()}function E(n){const t="abcdefghijklmnopqrstuvwxyz0123456789";let r="";for(let i=0;i<n;i++)r+=t.charAt(Math.floor(Math.random()*t.length));return r}async function L(){const n=e.window.activeTextEditor;if(!n){e.window.showErrorMessage("No active editor found");return}if(!$(n.document.uri)){e.window.showErrorMessage("Active file is not an ACF JSON file");return}try{const t=n.document,r=t.getText(),i=n.selection.active,s=t.offsetAt(i),a=I(r,s);if(!a){e.window.showErrorMessage("Cursor is not within a JSON object");return}const c=r.substring(a.start,a.end),d=c.match(/"key"\s*:\s*"([^"]+)"/);if(!d){e.window.showErrorMessage('No "key" field found in the current JSON object');return}const u=d[1],h="field_"+E(13),f=c.replace(/"key"\s*:\s*"[^"]+"/,`"key": "${h}"`),y=new e.Range(t.positionAt(a.start),t.positionAt(a.end)),g=new e.WorkspaceEdit;g.replace(t.uri,y,f),await e.workspace.applyEdit(g)?e.window.showInformationMessage(`ACF key updated: ${u} → ${h}`):e.window.showErrorMessage("Failed to update ACF key")}catch(t){e.window.showErrorMessage(`Error updating ACF key: ${t.message}`)}}async function V(n){if(!n){e.window.showErrorMessage("No file URI provided");return}try{const t=await e.workspace.openTextDocument(n),r=t.getText(),i={start:0,end:r.length},s=r.substring(i.start,i.end),a=s.match(/"key"\s*:\s*"([^"]+)"/);if(!a){e.window.showErrorMessage('No "key" field found in the JSON file');return}const c=a[1],d="group_"+E(13),u=s.replace(/"key"\s*:\s*"[^"]+"/,`"key": "${d}"`),h=new e.Range(t.positionAt(i.start),t.positionAt(i.end)),f=new e.WorkspaceEdit;if(f.replace(t.uri,h,u),await e.workspace.applyEdit(f),await e.window.showInformationMessage(`Generated new group key: ${d}

Would you like to rename the file to match the new key?`,"Yes","No")==="Yes"){const g=w.basename(n.fsPath),m=`${d}.json`,p=e.Uri.joinPath(n,"..",m);try{await e.workspace.fs.rename(n,p),e.window.showInformationMessage(`File renamed from ${g} to ${m}`);const C=z();C&&C.refresh()}catch(C){e.window.showErrorMessage(`Failed to rename file: ${C.message}`)}}}catch(t){e.window.showErrorMessage(`Error updating group key: ${t.message}`)}}async function B(n,t){if(!n){e.window.showErrorMessage("No file URI provided");return}try{const r=await e.workspace.openTextDocument(n),i=r.getText(),s=I(i,r.offsetAt(t));if(!s){e.window.showErrorMessage("Cursor is not within a field object");return}const a=i.substring(s.start,s.end),c=a.match(/"key"\s*:\s*"([^"]+)"/);if(!c){e.window.showErrorMessage('No "key" field found in the current field');return}const d=c[1],u="field_"+E(13),h=a.replace(/"key"\s*:\s*"[^"]+"/,`"key": "${u}"`),f=new e.Range(r.positionAt(s.start),r.positionAt(s.end)),y=new e.WorkspaceEdit;y.replace(r.uri,f,h);const g=new RegExp(`"${d}"`,"g");let m,p=!1;for(;(m=g.exec(i))!==null;){if(m.index>=s.start&&m.index<=s.end)continue;const C=r.positionAt(m.index),b=r.positionAt(m.index+m[0].length);y.replace(r.uri,new e.Range(C,b),`"${u}"`),p=!0}p&&e.window.showInformationMessage(`Replaced ${g.lastIndex} references to field key`),await e.workspace.applyEdit(y),e.window.showInformationMessage(`Field key updated: ${d} → ${u}`)}catch(r){e.window.showErrorMessage(`Error updating field key: ${r.message}`)}}async function q(n){if(!n){e.window.showErrorMessage("No file URI provided");return}try{const t=await e.workspace.openTextDocument(n),r=t.getText();let i;try{i=JSON.parse(r)}catch{e.window.showErrorMessage("Invalid JSON in file");return}if(!i.fields||!Array.isArray(i.fields)){e.window.showInformationMessage("No fields found in this file");return}const s=new Map;for(const d of i.fields)d.key&&s.set(d.key,"field_"+E(13));if(s.size===0){e.window.showInformationMessage("No field keys found to update");return}const a=new e.WorkspaceEdit;let c=0;for(const[d,u]of s){const h=new RegExp(`"key"\\s*:\\s*"${d}"`,"g");let f;for(;(f=h.exec(r))!==null;){const g=t.positionAt(f.index),m=t.positionAt(f.index+f[0].length);a.replace(t.uri,new e.Range(g,m),`"key": "${u}"`),c++}const y=new RegExp(`"${d}"`,"g");for(;(f=y.exec(r))!==null;){if(f[0]===`"${d}"`&&r.substring(f.index-7,f.index+7).includes('"key"'))continue;const g=t.positionAt(f.index),m=t.positionAt(f.index+f[0].length);a.replace(t.uri,new e.Range(g,m),`"${u}"`),c++}}c>0?(await e.workspace.applyEdit(a),e.window.showInformationMessage(`Generated ${s.size} new field keys with ${c} total replacements`)):e.window.showInformationMessage("No keys were updated")}catch(t){e.window.showErrorMessage(`Error updating field keys: ${t.message}`)}}function z(){return global.acfTreeProvider}function I(n,t){let r=0,i=-1,s=-1;for(let a=t;a>=0;a--){const c=n[a];if(c==="}")r++;else if(c==="{"&&(r--,r<0)){i=a;break}}if(i===-1)return null;r=0;for(let a=i;a<n.length;a++){const c=n[a];if(c==="{")r++;else if(c==="}"&&(r--,r===0)){s=a+1;break}}return s===-1?null:{start:i,end:s}}module.exports={activate:U,deactivate:W};
